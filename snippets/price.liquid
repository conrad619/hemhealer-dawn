{% comment %}
  Renders a list of product's price (regular, sale)

  Accepts:
  - product: {Object} Product Liquid object (optional)
  - placeholder: {Boolean} Renders a placeholder price (optional)
  - use_variant: {Boolean} Renders selected or first variant price instead of overall product pricing (optional)
  - show_badges: {Boolean} Renders 'Sale' and 'Sold Out' tags if the product matches the condition (optional)
  - price_class: {String} Adds a price class to the price element (optional)
  - show_compare_at_price: {Boolean} Renders the compare at price if the product matches the condition (optional)

  Usage:
  {% render 'price', product: product %}
{% endcomment %}
{%- liquid
  if use_variant
    assign target = product.selected_or_first_available_variant
  elsif placeholder
    assign target = null
  else
    assign target = product
  endif

  assign compare_at_price = target.compare_at_price
  assign price = target.price | default: 1999
  assign price_min = product.price_min
  assign price_max = product.price_max
  assign available = target.available | default: false
  assign money_price = price | money
  assign money_price_min = price_min | money
  assign money_price_max = price_max | money
  if settings.currency_code_enabled
    assign money_price = price | money_with_currency
    assign money_price_min = price_min | money_with_currency
    assign money_price_max = price_max | money_with_currency
  endif

  if target == product and product.price_varies
    assign money_price = 'products.product.price.from_price_html' | t: price: money_price
  endif
-%}

{%- unless target == null and placeholder == null -%}
  <div
    class='
      price
      {%- if price_class %} {{ price_class }}{% endif -%}
      {%- if available == false %} price--sold-out{% endif -%}
      {%- if compare_at_price > price and product.quantity_price_breaks_configured? != true %} price--on-sale{% endif -%}
      {%- if compare_at_price > price and product.quantity_price_breaks_configured? %} volume-pricing--sale-badge{% endif -%}
      {%- if product.price_varies == false and product.compare_at_price_varies %} price--no-compare{% endif -%}
      {%- if show_badges %} price--show-badge{% endif -%}
    '
  >
    <div class='price__container'>
      {%- comment -%}
        Explanation of description list:
          - div.price__regular: Displayed when there are no variants on sale
          - div.price__sale: Displayed when a variant is a sale
      {%- endcomment -%}
      <div class='price__regular'>
        {%- if product.quantity_price_breaks_configured? -%}
          {%- if show_compare_at_price and compare_at_price -%}
            {%- unless product.price_varies == false and product.compare_at_price_varies %}
              <span class='visually-hidden visually-hidden--inline'>
                {{- 'products.product.price.regular_price' | t -}}
              </span>
              <span>
                <s class='price-item price-item--regular variant-item__old-price'>
                  {% if settings.currency_code_enabled %}
                    {{ compare_at_price | money_with_currency }}
                  {% else %}
                    {{ compare_at_price | money }}
                  {% endif %}
                </s>
              </span>
            {%- endunless -%}
          {%- endif -%}
          <span class='visually-hidden visually-hidden--inline'>{{ 'products.product.price.regular_price' | t }}</span>
          <span class='price-item price-item--regular'>
            {{-
              'products.product.volume_pricing.price_range'
              | t: minimum: money_price_min, maximum: money_price_max
            -}}
          </span>
        {%- else -%}
          <span class='visually-hidden visually-hidden--inline'>{{ 'products.product.price.regular_price' | t }}</span>
          <span class='price-item price-item--regular'>
            {{ money_price }}
          </span>
        {%- endif -%}
      </div>
      <div class='price__sale'>
        {%- unless product.price_varies == false and product.compare_at_price_varies %}
          <span class='visually-hidden visually-hidden--inline'>{{ 'products.product.price.regular_price' | t }}</span>
          <span>
            <s class='price-item price-item--regular price__compare'>
              {% if settings.currency_code_enabled %}
                {{ compare_at_price | money_with_currency }}
              {% else %}
                {{ compare_at_price | money }}
              {% endif %}
            </s>
          </span>
        {%- endunless -%}
        <span class='visually-hidden visually-hidden--inline'>{{ 'products.product.price.sale_price' | t }}</span>
        <span class='price-item price-item--sale price-item--last'>
          {{ money_price }}
        </span>
      </div>
      <small class='unit-price caption{% if product.selected_or_first_available_variant.unit_price_measurement == nil %} hidden{% endif %}'>
        <span class='visually-hidden'>{{ 'products.product.price.unit_price' | t }}</span>
        <span class='price-item price-item--last'>
          <span>{{- product.selected_or_first_available_variant.unit_price | money -}}</span>
          <span aria-hidden='true'>/</span>
          <span class='visually-hidden'>&nbsp;{{ 'accessibility.unit_price_separator' | t }}&nbsp;</span>
          <span>
            {%- if product.selected_or_first_available_variant.unit_price_measurement.reference_value != 1 -%}
              {{- product.selected_or_first_available_variant.unit_price_measurement.reference_value -}}
            {%- endif -%}
            {{ product.selected_or_first_available_variant.unit_price_measurement.reference_unit }}
          </span>
        </span>
      </small>
    </div>
    {% comment %}
      {%- if show_badges -%}
        <span class='badge price__badge-sale color-{{ settings.sale_badge_color_scheme }}'>
          {{ 'products.product.on_sale' | t }}
        </span>

        <span class='badge price__badge-sold-out color-{{ settings.sold_out_badge_color_scheme }}'>
          {{ 'products.product.sold_out' | t }}
        </span>
      {%- endif -%}
    {% endcomment %}
  </div>
{% endunless %}

<script>
  /////////////////////////////////

  document.addEventListener('DOMContentLoaded', function () {
    function extractPrice(text) {
      return parseFloat(text.replace(/[^0-9.]/g, '')) || 0;
    }

    function updateSavings(priceWrapper) {
      const comparePriceEl = priceWrapper.querySelector('.price__compare');
      const salePriceEl = priceWrapper.querySelector('.price-item--regular');
      if (!comparePriceEl || !salePriceEl) return;

      let savingsEl = priceWrapper.querySelector('.price__savings');
      if (!savingsEl) {
        savingsEl = document.createElement('span');
        savingsEl.className = 'badge price__badge-sale color-scheme-5 price__savings';
        priceWrapper.appendChild(savingsEl);
      }

      const comparePrice = extractPrice(comparePriceEl.textContent);
      const salePrice = extractPrice(salePriceEl.textContent);

      if (comparePrice > salePrice) {
        const difference = (comparePrice - salePrice).toFixed(2);
        savingsEl.textContent = `Save $${difference}`;
        savingsEl.style.display = 'inline-block';
      } else {
        savingsEl.style.display = 'none';
      }
    }

    // Initial run
    const priceWrapper = document.querySelector('.price');
    if (priceWrapper) {
      updateSavings(priceWrapper);
    }

    // Also re-check on subscription dropdown or variant change
    document.addEventListener('change', function (e) {
      if (e.target.closest('variant-selects') || e.target.closest('.product-form')) {
        setTimeout(() => {
          const updatedPriceWrapper = document.querySelector('.price');
          if (updatedPriceWrapper) {
            updateSavings(updatedPriceWrapper);
          }
        }, 500); // Slight delay to allow DOM to update
      }
    });
  });

  // //////////////////////////////////////////////////////////////////////////////////////

  document.addEventListener('DOMContentLoaded', function () {
    const DISCOUNT_RATE = 0.1;

    function extractPrice(text) {
      return parseFloat(text.replace(/[^0-9.]/g, '')) || 0;
    }

    function formatMoney(amount) {
      return `$${amount.toFixed(2)}`;
    }

    function updateDisplayedPrice({ isSubscription }) {
      const priceWrapper = document.querySelector('.price');
      if (!priceWrapper) return;

      const compareEl = priceWrapper.querySelector('.price__compare');
      const saleEl = priceWrapper.querySelector('.price-item--regular');
      const saleElLast = priceWrapper.querySelector('.price-item--last');
      if (!saleEl) return;

      // Store original price for reset
      let basePrice = saleEl.getAttribute('data-original-price');
      if (!basePrice) {
        basePrice = extractPrice(saleEl.textContent);
        saleEl.setAttribute('data-original-price', basePrice);
      } else {
        basePrice = parseFloat(basePrice);
      }
      console.log('base price', basePrice);
      // Calculate new price
      const newPrice = isSubscription ? basePrice * (1 - DISCOUNT_RATE) : basePrice;

      saleEl.textContent = formatMoney(newPrice);
      saleElLast.textContent = formatMoney(newPrice);
      // Update savings
      let savingsEl = priceWrapper.querySelector('.price__savings');
      if (!savingsEl) {
        savingsEl = document.createElement('span');
        savingsEl.className = 'price__savings';
        priceWrapper.appendChild(savingsEl);
      }

      if (compareEl) {
        const comparePrice = extractPrice(compareEl.textContent);
        const savings = comparePrice - newPrice;
        if (savings > 0) {
          savingsEl.textContent = `Save $${savings.toFixed(2)}`;
          savingsEl.style.display = 'inline-block';
        } else {
          savingsEl.style.display = 'none';
        }
      } else {
        // savingsEl.style.display = 'none';
        const savings = basePrice - newPrice;
        if (savings > 0) {
          savingsEl.textContent = `Save $${savings.toFixed(2)}`;
          savingsEl.style.display = 'inline-block';
        } else {
          savingsEl.style.display = 'none';
        }
      }

      //add subscribe class
      if (isSubscription) {
        document.querySelector('.product').classList.add('subscribe');
      } else {
        document.querySelector('.product').classList.remove('subscribe');
      }
    }

    function handleRechargeV3(callback = null) {
      console.log('vcharge');
      const radioButtons = document.querySelectorAll('[name="purchaseOption"]');
      if (!radioButtons.length) return false;

      radioButtons.forEach((radio) => {
        radio.addEventListener('change', () => {
          const isSubscription = radio.value === 'subscription' && radio.checked;
          updateDisplayedPrice({ isSubscription });
        });

        // Initial check on load
        if (radio.checked && radio.value === 'subscription') {
          updateDisplayedPrice({ isSubscription: true });
        }
      });

      if (callback != null) {
        callback();
      }

      return true;
    }
    // setTimeout(() => {
    //   // Run on page load
    //   handleRechargeV3(function(){
    //     document.addEventListener('change', function (e) {
    //       if (e.target.closest('variant-selects') || e.target.closest('.product-form')) {
    //         setTimeout(() => {
    //           handleRechargeV3();
    //         }, 300); // Slight delay to allow DOM to update
    //       }
    //     });
    //   });

    // }, 1000);

    let attempts = 0;
    const maxAttempts = 10;
    const intervalTime = 500; // milliseconds

    const intervalId = setInterval(() => {
      const element = handleRechargeV3(function () {
        document.addEventListener('change', function (e) {
          if (e.target.closest('variant-selects') || e.target.closest('.product-form')) {
            setTimeout(() => {
              handleRechargeV3();
            }, 500); // Slight delay to allow DOM to update
          }
        });
      }); // Replace with your actual selector

      if (element) {
        // console.log('Element found:', element);

        clearInterval(intervalId); // Stop further attempts
      } else {
        attempts++;
        if (attempts >= maxAttempts) {
          // console.warn('Element not found after max attempts.');
          clearInterval(intervalId); // Stop after 10 tries
        }
      }
    }, intervalTime);
  });
</script>
